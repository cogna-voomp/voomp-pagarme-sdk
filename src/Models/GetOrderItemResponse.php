<?php

declare(strict_types=1);

/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PagarmeApiSDKLib\Models;

use PagarmeApiSDKLib\ApiHelper;
use PagarmeApiSDKLib\Utils\DateTimeHelper;
use stdClass;

/**
 * Response object for getting an order item
 */
class GetOrderItemResponse implements \JsonSerializable
{
    /**
     * @var array
     */
    private $id = [];

    /**
     * @var array
     */
    private $type = [];

    /**
     * @var array
     */
    private $description = [];

    /**
     * @var array
     */
    private $amount = [];

    /**
     * @var array
     */
    private $quantity = [];

    /**
     * @var array
     */
    private $category = [];

    /**
     * @var array
     */
    private $code = [];

    /**
     * @var array
     */
    private $status = [];

    /**
     * @var array
     */
    private $createdAt = [];

    /**
     * @var array
     */
    private $updatedAt = [];

    /**
     * Returns Id.
     * Id
     */
    public function getId(): ?string
    {
        if (count($this->id) == 0) {
            return null;
        }
        return $this->id['value'];
    }

    /**
     * Sets Id.
     * Id
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id['value'] = $id;
    }

    /**
     * Unsets Id.
     * Id
     */
    public function unsetId(): void
    {
        $this->id = [];
    }

    /**
     * Returns Type.
     */
    public function getType(): ?string
    {
        if (count($this->type) == 0) {
            return null;
        }
        return $this->type['value'];
    }

    /**
     * Sets Type.
     *
     * @maps type
     */
    public function setType(?string $type): void
    {
        $this->type['value'] = $type;
    }

    /**
     * Unsets Type.
     */
    public function unsetType(): void
    {
        $this->type = [];
    }

    /**
     * Returns Description.
     */
    public function getDescription(): ?string
    {
        if (count($this->description) == 0) {
            return null;
        }
        return $this->description['value'];
    }

    /**
     * Sets Description.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description['value'] = $description;
    }

    /**
     * Unsets Description.
     */
    public function unsetDescription(): void
    {
        $this->description = [];
    }

    /**
     * Returns Amount.
     */
    public function getAmount(): ?int
    {
        if (count($this->amount) == 0) {
            return null;
        }
        return $this->amount['value'];
    }

    /**
     * Sets Amount.
     *
     * @maps amount
     */
    public function setAmount(?int $amount): void
    {
        $this->amount['value'] = $amount;
    }

    /**
     * Unsets Amount.
     */
    public function unsetAmount(): void
    {
        $this->amount = [];
    }

    /**
     * Returns Quantity.
     */
    public function getQuantity(): ?int
    {
        if (count($this->quantity) == 0) {
            return null;
        }
        return $this->quantity['value'];
    }

    /**
     * Sets Quantity.
     *
     * @maps quantity
     */
    public function setQuantity(?int $quantity): void
    {
        $this->quantity['value'] = $quantity;
    }

    /**
     * Unsets Quantity.
     */
    public function unsetQuantity(): void
    {
        $this->quantity = [];
    }

    /**
     * Returns Category.
     * Category
     */
    public function getCategory(): ?string
    {
        if (count($this->category) == 0) {
            return null;
        }
        return $this->category['value'];
    }

    /**
     * Sets Category.
     * Category
     *
     * @maps category
     */
    public function setCategory(?string $category): void
    {
        $this->category['value'] = $category;
    }

    /**
     * Unsets Category.
     * Category
     */
    public function unsetCategory(): void
    {
        $this->category = [];
    }

    /**
     * Returns Code.
     * Code
     */
    public function getCode(): ?string
    {
        if (count($this->code) == 0) {
            return null;
        }
        return $this->code['value'];
    }

    /**
     * Sets Code.
     * Code
     *
     * @maps code
     */
    public function setCode(?string $code): void
    {
        $this->code['value'] = $code;
    }

    /**
     * Unsets Code.
     * Code
     */
    public function unsetCode(): void
    {
        $this->code = [];
    }

    /**
     * Returns Status.
     */
    public function getStatus(): ?string
    {
        if (count($this->status) == 0) {
            return null;
        }
        return $this->status['value'];
    }

    /**
     * Sets Status.
     *
     * @maps status
     */
    public function setStatus(?string $status): void
    {
        $this->status['value'] = $status;
    }

    /**
     * Unsets Status.
     */
    public function unsetStatus(): void
    {
        $this->status = [];
    }

    /**
     * Returns Created At.
     */
    public function getCreatedAt(): ?\DateTime
    {
        if (count($this->createdAt) == 0) {
            return null;
        }
        return $this->createdAt['value'];
    }

    /**
     * Sets Created At.
     *
     * @maps created_at
     * @factory \PagarmeApiSDKLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setCreatedAt(?\DateTime $createdAt): void
    {
        $this->createdAt['value'] = $createdAt;
    }

    /**
     * Unsets Created At.
     */
    public function unsetCreatedAt(): void
    {
        $this->createdAt = [];
    }

    /**
     * Returns Updated At.
     */
    public function getUpdatedAt(): ?\DateTime
    {
        if (count($this->updatedAt) == 0) {
            return null;
        }
        return $this->updatedAt['value'];
    }

    /**
     * Sets Updated At.
     *
     * @maps updated_at
     * @factory \PagarmeApiSDKLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setUpdatedAt(?\DateTime $updatedAt): void
    {
        $this->updatedAt['value'] = $updatedAt;
    }

    /**
     * Unsets Updated At.
     */
    public function unsetUpdatedAt(): void
    {
        $this->updatedAt = [];
    }

    /**
     * Converts the GetOrderItemResponse object to a human-readable string representation.
     *
     * @return string The string representation of the GetOrderItemResponse object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'GetOrderItemResponse',
            [
                'id' => $this->getId(),
                'type' => $this->getType(),
                'description' => $this->getDescription(),
                'amount' => $this->getAmount(),
                'quantity' => $this->getQuantity(),
                'category' => $this->getCategory(),
                'code' => $this->getCode(),
                'status' => $this->getStatus(),
                'createdAt' => $this->getCreatedAt(),
                'updatedAt' => $this->getUpdatedAt()
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->id)) {
            $json['id']          = $this->id['value'];
        }
        if (!empty($this->type)) {
            $json['type']        = $this->type['value'];
        }
        if (!empty($this->description)) {
            $json['description'] = $this->description['value'];
        }
        if (!empty($this->amount)) {
            $json['amount']      = $this->amount['value'];
        }
        if (!empty($this->quantity)) {
            $json['quantity']    = $this->quantity['value'];
        }
        if (!empty($this->category)) {
            $json['category']    = $this->category['value'];
        }
        if (!empty($this->code)) {
            $json['code']        = $this->code['value'];
        }
        if (!empty($this->status)) {
            $json['status']      = $this->status['value'];
        }
        if (!empty($this->createdAt)) {
            $json['created_at']  = DateTimeHelper::toRfc3339DateTime($this->createdAt['value']);
        }
        if (!empty($this->updatedAt)) {
            $json['updated_at']  = DateTimeHelper::toRfc3339DateTime($this->updatedAt['value']);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

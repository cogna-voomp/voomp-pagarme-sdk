<?php

declare(strict_types=1);

/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PagarmeApiSDKLib\Models;

use PagarmeApiSDKLib\ApiHelper;
use stdClass;

class GetPaymentOriginResponse implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $chargeId;

    /**
     * @var string|null
     */
    private $brandId;

    /**
     * Returns Charge Id.
     */
    public function getChargeId(): ?string
    {
        return $this->chargeId;
    }

    /**
     * Sets Charge Id.
     *
     * @maps charge_id
     */
    public function setChargeId(?string $chargeId): void
    {
        $this->chargeId = $chargeId;
    }

    /**
     * Returns Brand Id.
     */
    public function getBrandId(): ?string
    {
        return $this->brandId;
    }

    /**
     * Sets Brand Id.
     *
     * @maps brand_id
     */
    public function setBrandId(?string $brandId): void
    {
        $this->brandId = $brandId;
    }

    /**
     * Converts the GetPaymentOriginResponse object to a human-readable string representation.
     *
     * @return string The string representation of the GetPaymentOriginResponse object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'GetPaymentOriginResponse',
            ['chargeId' => $this->chargeId, 'brandId' => $this->brandId]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->chargeId)) {
            $json['charge_id'] = $this->chargeId;
        }
        if (isset($this->brandId)) {
            $json['brand_id']  = $this->brandId;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
